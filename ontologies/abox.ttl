@prefix dabox: <https://diviloper.dev/ontology/ABOX#> .
@prefix ddata: <https://diviloper.dev/ontology/Data#> .
@prefix dshapes: <https://diviloper.dev/ontology/shapes#> .
@prefix dtbox: <https://diviloper.dev/ontology#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

dabox:DBSCAN a dtbox:Algorithm ;
    dtbox:solves dabox:Clustering .

dabox:DuplicateRemoval a dtbox:Algorithm ;
    dtbox:solves dabox:DuplicationRemoval .

dabox:Explanation a dtbox:Problem .

dabox:HierarchicalClustering a dtbox:Algorithm ;
    dtbox:solves dabox:Clustering .

dabox:IsolationForest a dtbox:Algorithm ;
    dtbox:solves dabox:AnomalyDetection .

dabox:KMeans a dtbox:Algorithm ;
    dtbox:solves dabox:Clustering .

dabox:KNN a dtbox:Algorithm ;
    dtbox:solves dabox:Classification .

dabox:KNNImputation a dtbox:Algorithm ;
    dtbox:solves dabox:MissingValueManagement .

dabox:LabelExtraction a dtbox:Algorithm ;
    dtbox:solves dabox:DataManagement .

dabox:LocalOutlierFactor a dtbox:Algorithm ;
    dtbox:solves dabox:AnomalyDetection .

dabox:MeanImputation a dtbox:Algorithm ;
    dtbox:solves dabox:MissingValueManagement .

dabox:MedianImputation a dtbox:Algorithm ;
    dtbox:solves dabox:MissingValueManagement .

dabox:MinMaxScaling a dtbox:Algorithm ;
    dtbox:solves dabox:Normalization .

dabox:MissingValueRemoval a dtbox:Algorithm ;
    dtbox:solves dabox:MissingValueManagement .

dabox:ModeImputation a dtbox:Algorithm ;
    dtbox:solves dabox:MissingValueManagement .

dabox:NaiveBayes a dtbox:Algorithm ;
    dtbox:solves dabox:Classification .

dabox:OneClassSVM a dtbox:Algorithm ;
    dtbox:solves dabox:AnomalyDetection .

dabox:Prediction a dtbox:Problem .

dabox:RandomForest a dtbox:Algorithm ;
    dtbox:solves dabox:Classification .

dabox:RobustNormalization a dtbox:Algorithm ;
    dtbox:solves dabox:Normalization .

dabox:TrainTestSplit a dtbox:Algorithm ;
    dtbox:solves dabox:DataManagement .

dabox:ZScoreScaling a dtbox:Algorithm ;
    dtbox:solves dabox:Normalization .

dabox:component-random_absolute_train_test_split a dtbox:Component ;
    rdfs:label "Random Absolute Train-Test Split" ;
    dtbox:exposesParameter dabox:implementation-partitioning-count_\(absolute_size\),
        dabox:implementation-partitioning-random_seed ;
    dtbox:hasImplementation dabox:implementation-partitioning ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 1" ] [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 2 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 2" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    $output1 dmop:numberOfRows ?rows1.
    $output2 dmop:numberOfRows ?rows1.
}
INSERT {
    $output1 dmop:numberOfRows ?newRows1 .
    $output2 dmop:numberOfRows ?newRows2 .
}
WHERE {
    $output1 dmop:numberOfRows ?rows1.
    BIND(IF( ?rows1 - $parameter4>0, ?rows1 - $parameter4, 0 ) AS ?newRows1)
    BIND(?rows1 - ?newRows1 AS ?newRows2)
}
""" ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-partitioning-sampling_method ;
            dtbox:has_value "Random" ],
        [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-partitioning-size_of_first_partition ;
            dtbox:has_value "Absolute" ] .

dabox:component-random_relative_train_test_split a dtbox:Component ;
    rdfs:label "Random Relative Train-Test Split" ;
    dtbox:exposesParameter dabox:implementation-partitioning-fraction_\(relative_size\),
        dabox:implementation-partitioning-random_seed ;
    dtbox:hasImplementation dabox:implementation-partitioning ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 1" ] [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 2 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 2" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    $output1 dmop:numberOfRows ?rows1.
    $output2 dmop:numberOfRows ?rows1.
}
INSERT {
    $output1 dmop:numberOfRows ?newRows1 .
    $output2 dmop:numberOfRows ?newRows2 .
}
WHERE {
    $output1 dmop:numberOfRows ?rows1.
    BIND(ROUND(?rows1 * (1 - $parameter3)) AS ?newRows1)
    BIND(?rows1 - ?newRows1 AS ?newRows2)
}
""" ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-partitioning-sampling_method ;
            dtbox:has_value "Random" ],
        [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-partitioning-size_of_first_partition ;
            dtbox:has_value "Relative" ] .

dabox:component-top_k_absolute_train_test_split a dtbox:Component ;
    rdfs:label "Top K Absolute Train-Test Split" ;
    dtbox:exposesParameter dabox:implementation-partitioning-count_\(absolute_size\) ;
    dtbox:hasImplementation dabox:implementation-partitioning ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 1" ] [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 2 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 2" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    $output1 dmop:numberOfRows ?rows1.
    $output2 dmop:numberOfRows ?rows1.
}
INSERT {
    $output1 dmop:numberOfRows ?newRows1 .
    $output2 dmop:numberOfRows ?newRows2 .
}
WHERE {
    $output1 dmop:numberOfRows ?rows1.
    BIND(IF( ?rows1 - $parameter4>0, ?rows1 - $parameter4, 0 ) AS ?newRows1)
    BIND(?rows1 - ?newRows1 AS ?newRows2)
}
""" ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-partitioning-sampling_method ;
            dtbox:has_value "Top" ],
        [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-partitioning-size_of_first_partition ;
            dtbox:has_value "Absolute" ] .

dabox:component-top_k_relative_train_test_split a dtbox:Component ;
    rdfs:label "Top K Relative Train-Test Split" ;
    dtbox:exposesParameter dabox:implementation-partitioning-fraction_\(relative_size\) ;
    dtbox:hasImplementation dabox:implementation-partitioning ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 1" ] [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 2 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 2" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    $output1 dmop:numberOfRows ?rows1.
    $output2 dmop:numberOfRows ?rows1.
}
INSERT {
    $output1 dmop:numberOfRows ?newRows1 .
    $output2 dmop:numberOfRows ?newRows2 .
}
WHERE {
    $output1 dmop:numberOfRows ?rows1.
    BIND(ROUND(?rows1 * (1 - $parameter3)) AS ?newRows1)
    BIND(?rows1 - ?newRows1 AS ?newRows2)
}
""" ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-partitioning-size_of_first_partition ;
            dtbox:has_value "Relative" ],
        [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-partitioning-sampling_method ;
            dtbox:has_value "Top" ] .

ddata:DecisionTreeModel rdfs:subClassOf ddata:Model .

ddata:MissingValueModel rdfs:subClassOf ddata:Model .

ddata:NormalizerModel rdfs:subClassOf ddata:Model .

ddata:SVMModel rdfs:subClassOf ddata:Model .

dabox:DuplicationRemoval a dtbox:Problem ;
    dtbox:subProblemOf dabox:DataCleaning .

dabox:component-decimal_scaling a dtbox:LearnerComponent ;
    rdfs:label "Decimal Scaling" ;
    dtbox:hasApplier dabox:component-normalizer_applier ;
    dtbox:hasImplementation dabox:implementation-normalizer_\(pmml\) ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 1" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    ?column ?valueProperty ?value.
}
WHERE {
    $output1 dmop:hasColumn ?column.
    ?valuePropetry rdfs:subPropertyOf dmop:ColumnValueInfo.
    ?column ?valueProperty ?value.
}
            """ ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT {
    ?column dmop:isNormalized true.
}
WHERE {
    $output1 dmop:hasColumn ?column.
    ?column dmop:isFeature true .
}
            """ ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT DATA {
    $output1 dmop:isNormalized true.
    $output2 da:normalizationMode "Decimal".
}
            """ ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-normalizer_\(pmml\)-normalization_mode ;
            dtbox:has_value 3 ] .

dabox:component-decision_tree_learner a dtbox:LearnerComponent ;
    rdfs:label "Decision Tree Learner" ;
    dtbox:exposesParameter dabox:implementation-decision_tree_learner-average_split_point,
        dabox:implementation-decision_tree_learner-binary_nominal_splits,
        dabox:implementation-decision_tree_learner-class_column,
        dabox:implementation-decision_tree_learner-filter_invalid,
        dabox:implementation-decision_tree_learner-force_root_split_columns,
        dabox:implementation-decision_tree_learner-max_number_of_nominal_values,
        dabox:implementation-decision_tree_learner-min_number_records_per_node,
        dabox:implementation-decision_tree_learner-missing_value_strategy,
        dabox:implementation-decision_tree_learner-no_true_child_strategy,
        dabox:implementation-decision_tree_learner-number_of_threads,
        dabox:implementation-decision_tree_learner-pruning_method,
        dabox:implementation-decision_tree_learner-quality_measure,
        dabox:implementation-decision_tree_learner-reduced_error_pruning,
        dabox:implementation-decision_tree_learner-root_split_column,
        dabox:implementation-decision_tree_learner-skip_nominal_columns_without_domain_information ;
    dtbox:hasApplier dabox:component-decision_tree_predictor ;
    dtbox:hasImplementation dabox:implementation-decision_tree_learner ;
    dtbox:hasTransformation [ rdf:rest () ] .

dabox:component-decision_tree_predictor a dtbox:ApplierComponent ;
    rdfs:label "Decision Tree Predictor" ;
    dtbox:hasImplementation dabox:implementation-decision_tree_predictor ;
    dtbox:hasLearner dabox:component-decision_tree_learner ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 2 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 2 TO output 1" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT DATA {
    $output1 dmop:hasColumn _:labelColumn.
    _:labelColumn a dmop:Column;
                  dmop:isLabel true;
                  dmop:hasName $parameter3.
}
            """ ] ) .

dabox:component-drop_rows_with_missing_values a dtbox:LearnerComponent ;
    rdfs:label "Drop Rows with Missing Values" ;
    dtbox:hasApplier dabox:component-missing_value_management_applier ;
    dtbox:hasImplementation dabox:implementation-missing_value ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 1" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    ?column dmop:containsNulls false.
}
WHERE {
    $output1 dmop:hasColumn ?column.
    ?column dmop:containsNulls true.
}
""" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    $output1 dmop:numberOfRows ?rows1.
}
WHERE {
    $output1 dmop:numberOfRows ?rows1.
}
""" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT DATA {
    $output2 da:removesProperty dmop:numberOfRows.
}
""" ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-missing_value-float ;
            dtbox:has_value "org.knime.base.node.preproc.pmml.missingval.pmml.RemoveRowMissingCellHandlerFactory" ],
        [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-missing_value-string ;
            dtbox:has_value "org.knime.base.node.preproc.pmml.missingval.pmml.RemoveRowMissingCellHandlerFactory" ],
        [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-missing_value-integer ;
            dtbox:has_value "org.knime.base.node.preproc.pmml.missingval.pmml.RemoveRowMissingCellHandlerFactory" ] .

dabox:component-hypertangent_svm_learner a dtbox:LearnerComponent ;
    rdfs:label "HyperTangent SVM Learner" ;
    dtbox:exposesParameter dabox:implementation-svm_learner-class_column,
        dabox:implementation-svm_learner-delta,
        dabox:implementation-svm_learner-kappa,
        dabox:implementation-svm_learner-overlapping_penalty ;
    dtbox:hasApplier dabox:component-svm_predictor ;
    dtbox:hasImplementation dabox:implementation-svm_learner ;
    dtbox:hasTransformation ( [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT DATA{
    $output1 da:setsClassColumnName $parameter1 .
}
            """ ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-svm_learner-kernel_type ;
            dtbox:has_value "HyperTangent" ] .

dabox:component-mean_imputation a dtbox:LearnerComponent ;
    rdfs:label "Mean Imputation" ;
    dtbox:hasApplier dabox:component-missing_value_management_applier ;
    dtbox:hasImplementation dabox:implementation-missing_value ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 1" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    ?column dmop:containsNulls false.
}
WHERE {
    $output1 dmop:hasColumn ?column.
    ?column dmop:containsNulls true.
}
""" ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-missing_value-integer ;
            dtbox:has_value "org.knime.base.node.preproc.pmml.missingval.handlers.DoubleMeanMissingCellHandlerFactory" ],
        [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-missing_value-string ;
            dtbox:has_value "org.knime.base.node.preproc.pmml.missingval.handlers.MostFrequentValueMissingCellHandlerFactory" ],
        [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-missing_value-float ;
            dtbox:has_value "org.knime.base.node.preproc.pmml.missingval.handlers.DoubleMeanMissingCellHandlerFactory" ] .

dabox:component-min_max_scaling a dtbox:LearnerComponent ;
    rdfs:label "Min-Max Scaling" ;
    dtbox:exposesParameter dabox:implementation-normalizer_\(pmml\)-new_maximum,
        dabox:implementation-normalizer_\(pmml\)-new_minimum ;
    dtbox:hasApplier dabox:component-normalizer_applier ;
    dtbox:hasImplementation dabox:implementation-normalizer_\(pmml\) ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 1" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    ?column ?valueProperty ?value.
}
WHERE {
    $output1 dmop:hasColumn ?column.
    ?valuePropetry rdfs:subPropertyOf dmop:ColumnValueInfo.
    ?column ?valueProperty ?value.
}
            """ ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT {
    ?column dmop:hasMinValue $parameter2;
            dmop:hasMaxValue $parameter3;
            dmop:isNormalized true.
}
WHERE {
    $output1 dmop:hasColumn ?column.
    ?column dmop:isFeature true .
}
            """ ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT DATA {
    $output1 dmop:isNormalized true.
    $output2 da:normalizationMode "MinMax";
             da:newMin $parameter2;
             da:newMax $parameter3.
}
            """ ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-normalizer_\(pmml\)-normalization_mode ;
            dtbox:has_value 1 ] .

dabox:component-polynomial_svm_learner a dtbox:LearnerComponent ;
    rdfs:label "Polynomial SVM Learner" ;
    dtbox:exposesParameter dabox:implementation-svm_learner-bias,
        dabox:implementation-svm_learner-class_column,
        dabox:implementation-svm_learner-gamma,
        dabox:implementation-svm_learner-overlapping_penalty,
        dabox:implementation-svm_learner-power ;
    dtbox:hasApplier dabox:component-svm_predictor ;
    dtbox:hasImplementation dabox:implementation-svm_learner ;
    dtbox:hasTransformation ( [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT {
    $output1 da:setsClassColumnName "Prediction (?label)" .
}
WHERE {
    $input1 dmop:hasColumn ?column .
    ?column dmop:isLabel true ;
            dmop:hasColumnName ?label .
}
            """ ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-svm_learner-kernel_type ;
            dtbox:has_value "Polynomial" ] .

dabox:component-rbf_svm_learner a dtbox:LearnerComponent ;
    rdfs:label "RBF SVM Learner" ;
    dtbox:exposesParameter dabox:implementation-svm_learner-class_column,
        dabox:implementation-svm_learner-overlapping_penalty,
        dabox:implementation-svm_learner-sigma ;
    dtbox:hasApplier dabox:component-svm_predictor ;
    dtbox:hasImplementation dabox:implementation-svm_learner ;
    dtbox:hasTransformation ( [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT DATA{
    $output1 da:setsClassColumnName $parameter1 .
}
            """ ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-svm_learner-kernel_type ;
            dtbox:has_value "RBF" ] .

dabox:component-z_score_scaling a dtbox:LearnerComponent ;
    rdfs:label "Z-Score Scaling" ;
    dtbox:hasApplier dabox:component-normalizer_applier ;
    dtbox:hasImplementation dabox:implementation-normalizer_\(pmml\) ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 1" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    ?column ?valueProperty ?value.
}
WHERE {
    $output1 dmop:hasColumn ?column.
    ?valuePropetry rdfs:subPropertyOf dmop:ColumnValueInfo.
    ?column ?valueProperty ?value.
}
            """ ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT {
    ?column dmop:hasMeanValue 0;
            dmop:hasStandardDeviation 1;
            dmop:isNormalized true.
}
WHERE {
    $output1 dmop:hasColumn ?column.
    ?column dmop:isFeature true .
}
            """ ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT DATA {
    $output1 dmop:isNormalized true.
    $output2 da:normalizationMode "ZScore".
}
            """ ] ) ;
    dtbox:overridesParameter [ a dtbox:ParameterValue ;
            dtbox:forParameter dabox:implementation-normalizer_\(pmml\)-normalization_mode ;
            dtbox:has_value 2 ] .

dabox:implementation-decision_tree_learner-number_of_records_to_store_for_view a dtbox:Parameter ;
    rdfs:label "Number of records to store for view" ;
    dtbox:hasDatatype xsd:int ;
    dtbox:hasDefaultValue 10000 ;
    dtbox:has_position 1 .

dabox:implementation-decision_tree_predictor-change_prediction a dtbox:Parameter ;
    rdfs:label "Change Prediction" ;
    dtbox:hasDatatype xsd:boolean ;
    dtbox:hasDefaultValue false ;
    dtbox:has_position 3 .

dabox:implementation-decision_tree_predictor-class_probability_suffix a dtbox:Parameter ;
    rdfs:label "Class Probability Suffix" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "" ;
    dtbox:has_position 4 .

dabox:implementation-decision_tree_predictor-prediction_column_name a dtbox:Parameter ;
    rdfs:label "Prediction column name" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "Prediction ($$LABEL$$)" ;
    dtbox:has_position 2 .

dabox:implementation-decision_tree_predictor-show_distribution a dtbox:Parameter ;
    rdfs:label "Show distribution" ;
    dtbox:hasDatatype xsd:boolean ;
    dtbox:hasDefaultValue true ;
    dtbox:has_position 1 .

dabox:implementation-decision_tree_predictor-use_gain_ratio a dtbox:Parameter ;
    rdfs:label "Use Gain Ratio" ;
    dtbox:hasDatatype xsd:int ;
    dtbox:hasDefaultValue 20000 ;
    dtbox:has_position 0 .

dabox:implementation-missing_value_\(applier\) a dtbox:ApplierImplementation ;
    rdfs:label "Missing Value (Applier)" ;
    dtbox:engine "KNIME" ;
    dtbox:implements dabox:MissingValueManagement ;
    dtbox:knime_bundle_name "KNIME Base Bundle" ;
    dtbox:knime_bundle_symbolic_name "org.knime.base" ;
    dtbox:knime_bundle_vendor "KNIME AG, Zurich, Switzerland" ;
    dtbox:knime_node_factory "org.knime.base.node.preproc.pmml.missingval.apply.MissingValueApplyNodeFactory" ;
    dtbox:specifiesInput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:TabularDataset ;
            dtbox:has_position 1 ],
        [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:MissingValueModel ;
            dtbox:has_position 0 ] ;
    dtbox:specifiesOutput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:NonNullTabularDatasetShape ;
            dtbox:has_position 0 ] .

dabox:implementation-partitioning-class_columns a dtbox:Parameter ;
    rdfs:label "Class columns" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "None" ;
    dtbox:has_position 5 .

dabox:implementation-svm_predictor-add_probabilities a dtbox:Parameter ;
    rdfs:label "Add probabilities" ;
    dtbox:hasDatatype xsd:boolean ;
    dtbox:hasDefaultValue false ;
    dtbox:has_position 2 .

dabox:implementation-svm_predictor-change_prediction a dtbox:Parameter ;
    rdfs:label "Change prediction" ;
    dtbox:hasDatatype xsd:boolean ;
    dtbox:hasDefaultValue false ;
    dtbox:has_position 1 .

dabox:implementation-svm_predictor-class_probability_suffix a dtbox:Parameter ;
    rdfs:label "Class probability suffix" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "" ;
    dtbox:has_position 3 .

dabox:implementation-svm_predictor-prediction_column_name a dtbox:Parameter ;
    rdfs:label "Prediction column name" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "Prediction ($$LABEL$$)" ;
    dtbox:has_position 0 .

dabox:DataManagement a dtbox:Problem .

dabox:DecisionTree a dtbox:Algorithm ;
    dtbox:solves dabox:Classification .

dabox:SVM a dtbox:Algorithm ;
    dtbox:solves dabox:Classification .

dabox:component-missing_value_management_applier a dtbox:ApplierComponent ;
    rdfs:label "Missing Value Management Applier" ;
    dtbox:hasImplementation dabox:implementation-missing_value_\(applier\) ;
    dtbox:hasLearner dabox:component-drop_rows_with_missing_values,
        dabox:component-mean_imputation ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 2 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 2 TO output 1" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    $output2 ?property ?value.
}
WHERE {
    $output1 da:removesProperty ?property.
    $output2 ?property ?value.
}
""" ] ) .

dabox:implementation-decision_tree_learner a dtbox:LearnerImplementation ;
    rdfs:label "Decision Tree Learner" ;
    dtbox:engine "KNIME" ;
    dtbox:hasApplier dabox:implementation-decision_tree_predictor ;
    dtbox:hasParameter dabox:implementation-decision_tree_learner-average_split_point,
        dabox:implementation-decision_tree_learner-binary_nominal_splits,
        dabox:implementation-decision_tree_learner-class_column,
        dabox:implementation-decision_tree_learner-filter_invalid,
        dabox:implementation-decision_tree_learner-force_root_split_columns,
        dabox:implementation-decision_tree_learner-max_number_of_nominal_values,
        dabox:implementation-decision_tree_learner-min_number_records_per_node,
        dabox:implementation-decision_tree_learner-missing_value_strategy,
        dabox:implementation-decision_tree_learner-no_true_child_strategy,
        dabox:implementation-decision_tree_learner-number_of_records_to_store_for_view,
        dabox:implementation-decision_tree_learner-number_of_threads,
        dabox:implementation-decision_tree_learner-pruning_method,
        dabox:implementation-decision_tree_learner-quality_measure,
        dabox:implementation-decision_tree_learner-reduced_error_pruning,
        dabox:implementation-decision_tree_learner-root_split_column,
        dabox:implementation-decision_tree_learner-skip_nominal_columns_without_domain_information ;
    dtbox:implements dabox:DecisionTree ;
    dtbox:knime_bundle_name "KNIME Base Bundle" ;
    dtbox:knime_bundle_symbolic_name "org.knime.base" ;
    dtbox:knime_bundle_vendor "KNIME AG, Zurich, Switzerland" ;
    dtbox:knime_node_factory "org.knime.base.node.mine.decisiontree2.learner2.DecisionTreeLearnerNodeFactory3" ;
    dtbox:specifiesInput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:LabeledTabularDatasetShape ;
            dtbox:has_position 0 ] ;
    dtbox:specifiesOutput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:DecisionTreeModel ;
            dtbox:has_position 0 ] .

dabox:implementation-decision_tree_learner-average_split_point a dtbox:Parameter ;
    rdfs:label "Average split point" ;
    dtbox:hasDatatype xsd:boolean ;
    dtbox:hasDefaultValue true ;
    dtbox:has_position 6 .

dabox:implementation-decision_tree_learner-binary_nominal_splits a dtbox:Parameter ;
    rdfs:label "Binary nominal splits" ;
    dtbox:hasDatatype xsd:boolean ;
    dtbox:hasDefaultValue false ;
    dtbox:has_position 9 .

dabox:implementation-decision_tree_learner-class_column a dtbox:Parameter ;
    rdfs:label "Class column" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "$$LABEL$$" ;
    dtbox:has_position 0 .

dabox:implementation-decision_tree_learner-filter_invalid a dtbox:Parameter ;
    rdfs:label "Filter invalid" ;
    dtbox:hasDatatype xsd:boolean ;
    dtbox:hasDefaultValue false ;
    dtbox:has_position 10 .

dabox:implementation-decision_tree_learner-force_root_split_columns a dtbox:Parameter ;
    rdfs:label "Force root split columns" ;
    dtbox:hasDatatype xsd:boolean ;
    dtbox:hasDefaultValue false ;
    dtbox:has_position 14 .

dabox:implementation-decision_tree_learner-max_number_of_nominal_values a dtbox:Parameter ;
    rdfs:label "Max number of nominal values" ;
    dtbox:hasDatatype xsd:int ;
    dtbox:hasDefaultValue 10 ;
    dtbox:has_position 8 .

dabox:implementation-decision_tree_learner-min_number_records_per_node a dtbox:Parameter ;
    rdfs:label "Min number records per node" ;
    dtbox:hasDatatype xsd:int ;
    dtbox:hasDefaultValue 10 ;
    dtbox:has_position 2 .

dabox:implementation-decision_tree_learner-missing_value_strategy a dtbox:Parameter ;
    rdfs:label "Missing value strategy" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "lastPrediction" ;
    dtbox:has_position 13 .

dabox:implementation-decision_tree_learner-no_true_child_strategy a dtbox:Parameter ;
    rdfs:label "No true child strategy" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "returnNullPrediction" ;
    dtbox:has_position 12 .

dabox:implementation-decision_tree_learner-number_of_threads a dtbox:Parameter ;
    rdfs:label "Number of threads" ;
    dtbox:hasDatatype xsd:int ;
    dtbox:hasDefaultValue "None" ;
    dtbox:has_position 7 .

dabox:implementation-decision_tree_learner-pruning_method a dtbox:Parameter ;
    rdfs:label "Pruning method" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "No pruning" ;
    dtbox:has_position 3 .

dabox:implementation-decision_tree_learner-quality_measure a dtbox:Parameter ;
    rdfs:label "Quality Measure" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "Gini index" ;
    dtbox:has_position 5 .

dabox:implementation-decision_tree_learner-reduced_error_pruning a dtbox:Parameter ;
    rdfs:label "Reduced error pruning" ;
    dtbox:hasDatatype xsd:boolean ;
    dtbox:hasDefaultValue true ;
    dtbox:has_position 4 .

dabox:implementation-decision_tree_learner-root_split_column a dtbox:Parameter ;
    rdfs:label "Root split column" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "None" ;
    dtbox:has_position 15 .

dabox:implementation-decision_tree_learner-skip_nominal_columns_without_domain_information a dtbox:Parameter ;
    rdfs:label "Skip nominal columns without domain information" ;
    dtbox:hasDatatype xsd:boolean ;
    dtbox:hasDefaultValue false ;
    dtbox:has_position 11 .

dabox:implementation-decision_tree_predictor a dtbox:ApplierImplementation ;
    rdfs:label "Decision Tree Predictor" ;
    dtbox:engine "KNIME" ;
    dtbox:hasLearner dabox:implementation-decision_tree_learner ;
    dtbox:hasParameter dabox:implementation-decision_tree_predictor-change_prediction,
        dabox:implementation-decision_tree_predictor-class_probability_suffix,
        dabox:implementation-decision_tree_predictor-prediction_column_name,
        dabox:implementation-decision_tree_predictor-show_distribution,
        dabox:implementation-decision_tree_predictor-use_gain_ratio ;
    dtbox:implements dabox:DecisionTree ;
    dtbox:knime_bundle_name "KNIME Base Bundle" ;
    dtbox:knime_bundle_symbolic_name "org.knime.base" ;
    dtbox:knime_bundle_vendor "KNIME AG, Zurich, Switzerland" ;
    dtbox:knime_node_factory "org.knime.base.node.mine.decisiontree2.predictor2.DecTreePredictorNodeFactory" ;
    dtbox:specifiesInput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:TabularDataset ;
            dtbox:has_position 1 ],
        [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:DecisionTreeModel ;
            dtbox:has_position 0 ] ;
    dtbox:specifiesOutput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:LabeledTabularDatasetShape ;
            dtbox:has_position 0 ] .

dabox:implementation-missing_value a dtbox:LearnerImplementation ;
    rdfs:label "Missing Value" ;
    dtbox:engine "KNIME" ;
    dtbox:hasParameter dabox:implementation-missing_value-float,
        dabox:implementation-missing_value-integer,
        dabox:implementation-missing_value-string ;
    dtbox:implements dabox:MissingValueManagement ;
    dtbox:knime_bundle_name "KNIME Base Bundle" ;
    dtbox:knime_bundle_symbolic_name "org.knime.base" ;
    dtbox:knime_bundle_vendor "KNIME AG, Zurich, Switzerland" ;
    dtbox:knime_node_factory "org.knime.base.node.preproc.pmml.missingval.compute.MissingValueHandlerNodeFactory" ;
    dtbox:specifiesInput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:TabularDataset ;
            dtbox:has_position 0 ] ;
    dtbox:specifiesOutput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:NonNullTabularDatasetShape ;
            dtbox:has_position 0 ],
        [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:MissingValueModel ;
            dtbox:has_position 1 ] .

dabox:implementation-normalizer_\(pmml\)-new_maximum a dtbox:Parameter ;
    rdfs:label "New maximum" ;
    dtbox:hasDatatype xsd:float ;
    dtbox:hasDefaultValue 1e+00 ;
    dtbox:has_position 2 .

dabox:implementation-normalizer_\(pmml\)-new_minimum a dtbox:Parameter ;
    rdfs:label "New minimum" ;
    dtbox:hasDatatype xsd:float ;
    dtbox:hasDefaultValue 0e+00 ;
    dtbox:has_position 1 .

dabox:implementation-normalizer_apply_\(pmml\) a dtbox:ApplierImplementation ;
    rdfs:label "Normalizer Apply (PMML)" ;
    dtbox:engine "KNIME" ;
    dtbox:hasLearner dabox:implementation-normalizer_\(pmml\) ;
    dtbox:implements dabox:Normalization ;
    dtbox:knime_bundle_name "KNIME Base Bundle" ;
    dtbox:knime_bundle_symbolic_name "org.knime.base" ;
    dtbox:knime_bundle_vendor "KNIME AG, Zurich, Switzerland" ;
    dtbox:knime_node_factory "org.knime.base.node.preproc.pmml.normalize.NormalizerPMMLApplyNodeFactory" ;
    dtbox:specifiesInput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:NormalizerModel ;
            dtbox:has_position 0 ],
        [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:TabularDataset ;
            dtbox:has_position 1 ] ;
    dtbox:specifiesOutput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:NormalizedTabularDatasetShape ;
            dtbox:has_position 1 ],
        [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:NormalizerModel ;
            dtbox:has_position 0 ] .

dabox:implementation-svm_learner-bias a dtbox:Parameter ;
    rdfs:label "Bias" ;
    dtbox:hasDatatype xsd:double ;
    dtbox:hasDefaultValue 1e+00 ;
    dtbox:has_position 2 .

dabox:implementation-svm_learner-delta a dtbox:Parameter ;
    rdfs:label "Delta" ;
    dtbox:hasDatatype xsd:double ;
    dtbox:hasDefaultValue 5e-01 ;
    dtbox:has_position 6 .

dabox:implementation-svm_learner-gamma a dtbox:Parameter ;
    rdfs:label "Gamma" ;
    dtbox:hasDatatype xsd:double ;
    dtbox:hasDefaultValue 1e+00 ;
    dtbox:has_position 4 .

dabox:implementation-svm_learner-kappa a dtbox:Parameter ;
    rdfs:label "Kappa" ;
    dtbox:hasDatatype xsd:double ;
    dtbox:hasDefaultValue 1e-01 ;
    dtbox:has_position 5 .

dabox:implementation-svm_learner-power a dtbox:Parameter ;
    rdfs:label "Power" ;
    dtbox:hasDatatype xsd:double ;
    dtbox:hasDefaultValue 1e+00 ;
    dtbox:has_position 3 .

dabox:implementation-svm_learner-sigma a dtbox:Parameter ;
    rdfs:label "Sigma" ;
    dtbox:hasDatatype xsd:double ;
    dtbox:hasDefaultValue 1e-01 ;
    dtbox:has_position 7 .

dabox:implementation-svm_predictor a dtbox:ApplierImplementation ;
    rdfs:label "SVM Predictor" ;
    dtbox:engine "KNIME" ;
    dtbox:hasLearner dabox:implementation-svm_learner ;
    dtbox:hasParameter dabox:implementation-svm_predictor-add_probabilities,
        dabox:implementation-svm_predictor-change_prediction,
        dabox:implementation-svm_predictor-class_probability_suffix,
        dabox:implementation-svm_predictor-prediction_column_name ;
    dtbox:implements dabox:SVM ;
    dtbox:knime_bundle_name "KNIME Base Bundle" ;
    dtbox:knime_bundle_symbolic_name "org.knime.base" ;
    dtbox:knime_bundle_vendor "KNIME AG, Zurich, Switzerland" ;
    dtbox:knime_node_factory "org.knime.base.node.mine.svm.predictor2.SVMPredictorNodeFactory" ;
    dtbox:specifiesInput [ a dtbox:IOSpec ;
            dtbox:hasTag [ a sh:NodeShape,
                        dtbox:DataTag ;
                    sh:and ( dshapes:NormalizedTabularDatasetShape dshapes:NonNullTabularDatasetShape ) ] ;
            dtbox:has_position 1 ],
        [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:SVMModel ;
            dtbox:has_position 0 ] ;
    dtbox:specifiesOutput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:LabeledTabularDatasetShape ;
            dtbox:has_position 0 ] .

dabox:AnomalyDetection a dtbox:Problem ;
    dtbox:subProblemOf dabox:Description .

dabox:Clustering a dtbox:Problem ;
    dtbox:subProblemOf dabox:Description .

dabox:DataCleaning a dtbox:Problem .

dabox:Description a dtbox:Problem .

dabox:component-normalizer_applier a dtbox:ApplierComponent ;
    rdfs:label "Normalizer Applier" ;
    dtbox:hasImplementation dabox:implementation-normalizer_apply_\(pmml\) ;
    dtbox:hasLearner dabox:component-decimal_scaling,
        dabox:component-min_max_scaling,
        dabox:component-z_score_scaling ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 1 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 1 TO output 1" ] [ a dtbox:CopyTransformation ;
                dtbox:copy_input 2 ;
                dtbox:copy_output 2 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 2 TO output 2" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
DELETE {
    ?column ?valueProperty ?value.
}
WHERE {
    $output2 dmop:hasColumn ?column.
    ?valuePropetry rdfs:subPropertyOf dmop:ColumnValueInfo.
    ?column ?valueProperty ?value.
}
            """ ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT {
    ?column dmop:hasMinValue $parameter2;
            dmop:hasMaxValue $parameter3;
            dmop:isNormalized true.
}
WHERE {
    $output2 dmop:hasColumn ?column.
    ?column dmop:isFeature true .
    $input1 da:normalizationMode "MinMax".
}
            """ ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT {
    ?column dmop:hasMeanValue 0;
            dmop:hasStandardDeviation 1;
            dmop:isNormalized true.
}
WHERE {
    $output2 dmop:hasColumn ?column .
    ?column dmop:isFeature true .
    $input1 da:normalizationMode "ZScore".
}
            """ ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT {
    ?column dmop:isNormalized true.
}
WHERE {
    $output1 dmop:hasColumn ?column.
    ?column dmop:isFeature true .
    $input1 da:normalizationMode "Decimal".
}
            """ ] ) .

dabox:component-svm_predictor a dtbox:ApplierComponent ;
    rdfs:label "SVM Predictor" ;
    dtbox:hasImplementation dabox:implementation-svm_predictor ;
    dtbox:hasLearner dabox:component-hypertangent_svm_learner,
        dabox:component-polynomial_svm_learner,
        dabox:component-rbf_svm_learner ;
    dtbox:hasTransformation ( [ a dtbox:CopyTransformation ;
                dtbox:copy_input 2 ;
                dtbox:copy_output 1 ;
                dtbox:transformation_language "COPY" ;
                dtbox:transformation_query "COPY input 2 TO output 1" ] [ a dtbox:Transformation ;
                dtbox:transformation_language "SPARQL" ;
                dtbox:transformation_query """
INSERT {
    $output1 dmop:hasColumn _:labelColumn .
    _:labelColumn a dmop:Column ;
        dmop:isLabel true;
      dmop:hasName $parameter1.
}
WHERE {
    $input1 da:setsClassColumnName ?classColumnName .
}
            """ ] ) .

dabox:implementation-missing_value-float a dtbox:Parameter ;
    rdfs:label "Float" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "None" ;
    dtbox:has_position 1 .

dabox:implementation-missing_value-integer a dtbox:Parameter ;
    rdfs:label "Integer" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "None" ;
    dtbox:has_position 0 .

dabox:implementation-missing_value-string a dtbox:Parameter ;
    rdfs:label "String" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "None" ;
    dtbox:has_position 2 .

dabox:implementation-partitioning-count_\(absolute_size\) a dtbox:Parameter ;
    rdfs:label "Count (Absolute size)" ;
    dtbox:hasDatatype xsd:int ;
    dtbox:hasDefaultValue 100 ;
    dtbox:has_position 3 .

dabox:implementation-partitioning-fraction_\(relative_size\) a dtbox:Parameter ;
    rdfs:label "Fraction (Relative size)" ;
    dtbox:hasDatatype xsd:double ;
    dtbox:hasDefaultValue 8e-01 ;
    dtbox:has_position 2 .

dabox:implementation-partitioning-random_seed a dtbox:Parameter ;
    rdfs:label "Random seed" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "None" ;
    dtbox:has_position 4 .

dabox:implementation-normalizer_\(pmml\) a dtbox:LearnerImplementation ;
    rdfs:label "Normalizer (PMML)" ;
    dtbox:engine "KNIME" ;
    dtbox:hasApplier dabox:implementation-normalizer_apply_\(pmml\) ;
    dtbox:hasParameter dabox:implementation-normalizer_\(pmml\)-new_maximum,
        dabox:implementation-normalizer_\(pmml\)-new_minimum,
        dabox:implementation-normalizer_\(pmml\)-normalization_mode ;
    dtbox:implements dabox:Normalization ;
    dtbox:knime_bundle_name "KNIME Base Bundle" ;
    dtbox:knime_bundle_symbolic_name "org.knime.base" ;
    dtbox:knime_bundle_vendor "KNIME AG, Zurich, Switzerland" ;
    dtbox:knime_node_factory "org.knime.base.node.preproc.pmml.normalize.NormalizerPMMLNodeFactory2" ;
    dtbox:specifiesInput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:TabularDataset ;
            dtbox:has_position 0 ] ;
    dtbox:specifiesOutput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:NormalizedTabularDatasetShape ;
            dtbox:has_position 0 ],
        [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:NormalizerModel ;
            dtbox:has_position 1 ] .

dabox:implementation-normalizer_\(pmml\)-normalization_mode a dtbox:Parameter ;
    rdfs:label "Normalization mode" ;
    dtbox:hasDatatype xsd:int ;
    dtbox:hasDefaultValue "None" ;
    dtbox:has_position 0 .

dabox:implementation-partitioning a dtbox:Implementation ;
    rdfs:label "Partitioning" ;
    dtbox:engine "KNIME" ;
    dtbox:hasParameter dabox:implementation-partitioning-class_columns,
        dabox:implementation-partitioning-count_\(absolute_size\),
        dabox:implementation-partitioning-fraction_\(relative_size\),
        dabox:implementation-partitioning-random_seed,
        dabox:implementation-partitioning-sampling_method,
        dabox:implementation-partitioning-size_of_first_partition ;
    dtbox:implements dabox:Partitioning ;
    dtbox:knime_bundle_name "KNIME Base Bundle" ;
    dtbox:knime_bundle_symbolic_name "org.knime.base" ;
    dtbox:knime_bundle_vendor "KNIME AG, Zurich, Switzerland" ;
    dtbox:knime_node_factory "org.knime.base.node.preproc.partition.PartitionNodeFactory" ;
    dtbox:specifiesInput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:TabularDataset ;
            dtbox:has_position 0 ] ;
    dtbox:specifiesOutput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:TestDataset ;
            dtbox:has_position 1 ],
        [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:TrainDataset ;
            dtbox:has_position 0 ] .

dabox:implementation-svm_learner a dtbox:LearnerImplementation ;
    rdfs:label "SVM Learner" ;
    dtbox:engine "KNIME" ;
    dtbox:hasApplier dabox:implementation-svm_predictor ;
    dtbox:hasParameter dabox:implementation-svm_learner-bias,
        dabox:implementation-svm_learner-class_column,
        dabox:implementation-svm_learner-delta,
        dabox:implementation-svm_learner-gamma,
        dabox:implementation-svm_learner-kappa,
        dabox:implementation-svm_learner-kernel_type,
        dabox:implementation-svm_learner-overlapping_penalty,
        dabox:implementation-svm_learner-power,
        dabox:implementation-svm_learner-sigma ;
    dtbox:implements dabox:SVM ;
    dtbox:knime_bundle_name "KNIME Base Bundle" ;
    dtbox:knime_bundle_symbolic_name "org.knime.base" ;
    dtbox:knime_bundle_vendor "KNIME AG, Zurich, Switzerland" ;
    dtbox:knime_node_factory "org.knime.base.node.mine.svm.learner.SVMLearnerNodeFactory2" ;
    dtbox:specifiesInput [ a dtbox:IOSpec ;
            dtbox:hasTag [ a sh:NodeShape,
                        dtbox:DataTag ;
                    sh:and ( dshapes:LabeledTabularDatasetShape dshapes:NormalizedTabularDatasetShape dshapes:NonNullTabularDatasetShape ) ] ;
            dtbox:has_position 0 ] ;
    dtbox:specifiesOutput [ a dtbox:IOSpec ;
            dtbox:hasTag dshapes:SVMModel ;
            dtbox:has_position 0 ] .

dabox:implementation-svm_learner-class_column a dtbox:Parameter ;
    rdfs:label "Class column" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "$$LABEL$$" ;
    dtbox:has_position 0 .

dabox:implementation-svm_learner-kernel_type a dtbox:Parameter ;
    rdfs:label "Kernel type" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "None" ;
    dtbox:has_position 8 .

dabox:implementation-svm_learner-overlapping_penalty a dtbox:Parameter ;
    rdfs:label "Overlapping Penalty" ;
    dtbox:hasDatatype xsd:double ;
    dtbox:hasDefaultValue 1e+00 ;
    dtbox:has_position 1 .

ddata:Model rdfs:subClassOf dtbox:Data .

dabox:Classification a dtbox:Problem ;
    dtbox:subProblemOf dabox:Description .

dabox:Normalization a dtbox:Problem ;
    dtbox:subProblemOf dabox:DataCleaning .

dabox:implementation-partitioning-sampling_method a dtbox:Parameter ;
    rdfs:label "Sampling Method" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "Random" ;
    dtbox:has_position 1 .

dabox:implementation-partitioning-size_of_first_partition a dtbox:Parameter ;
    rdfs:label "Size of First Partition" ;
    dtbox:hasDatatype xsd:string ;
    dtbox:hasDefaultValue "Relative" ;
    dtbox:has_position 0 .

dabox:MissingValueManagement a dtbox:Problem ;
    dtbox:subProblemOf dabox:DataCleaning .

